package smallsql.junit;
import java.sql.*;
public class TestResultSet extends BasicTestCase {
	private static boolean init;
    protected void setUp() throws Exception{
    	if(init) return;
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		dropTable( con, "ResultSet");
		st.execute("Create Table ResultSet (i int identity, c varchar(30))");
        st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        ResultSet rs = st.executeQuery("Select * From ResultSet");
        rs.moveToInsertRow();
        rs.insertRow();
        rs.moveToInsertRow();
        rs.insertRow();
		init = true;
    }
    public void testScrollStates() throws Exception{
        Connection con = AllTests.getConnection();
        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        ResultSet rs = st.executeQuery("Select * From ResultSet Where 1=0");
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        rs.moveToInsertRow();
        rs.insertRow();
        rs.beforeFirst();
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("next", rs.next() );
        assertTrue("isFirst", rs.isFirst() );
        assertTrue("rowInserted", rs.rowInserted() );
        assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        assertFalse("next", rs.next() );
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("first", rs.first() );
        assertEquals("getRow", 1, rs.getRow() );
        assertFalse("previous", rs.previous() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        assertTrue("last", rs.last() );
        assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        rs.afterLast();
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
    }
    public void testScrollStatesGroupBy() throws Exception{
        Connection con = AllTests.getConnection();
        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        ResultSet rs = st.executeQuery("Select i,max(c) From ResultSet Group By i HAVING i=1");
        assertEquals("getConcurrency",ResultSet.CONCUR_READ_ONLY, rs.getConcurrency());
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        rs.beforeFirst();
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("next", rs.next() );
        assertTrue("isFirst", rs.isFirst() );
        assertFalse("rowInserted", rs.rowInserted() );
        assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        assertFalse("next", rs.next() );
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("first", rs.first() );
        assertEquals("getRow", 1, rs.getRow() );
        assertFalse("previous", rs.previous() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        assertTrue("last", rs.last() );
        assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        rs.afterLast();
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
    }
    public void testUpdate() throws Exception{
        Connection con = AllTests.getConnection();
        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        ResultSet rs;
        rs = st.executeQuery("Select * From ResultSet");
        assertTrue("next", rs.next());
        assertEquals("getRow", 1, rs.getRow() );
        int id = rs.getInt("i");
        rs.updateShort("c", (short)123 );
        assertEquals( (short)123, rs.getShort("c") );
        assertEquals( id, rs.getInt("i") ); 
        rs.updateRow();
        assertEquals( (short)123, rs.getShort("c") );
        assertFalse( rs.rowUpdated() );  
        assertFalse( rs.rowInserted() );
        assertFalse( rs.rowDeleted() );
        assertEquals("getRow", 1, rs.getRow() );
        rs = st.executeQuery("Select * From ResultSet");
        assertTrue("next", rs.next());
        rs.updateByte("c", (byte)66 );
        assertEquals( (byte)66, rs.getByte("c") );
        rs.updateRow();
        assertEquals( (short)66, rs.getShort("c") );
    }
    public void testUpdateAndScroll() throws Exception{
        final Object value = "UpdateAndScroll";
        Object value1;
        Object value2;
        Connection con = AllTests.getConnection();
        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        ResultSet rs = st.executeQuery("Select * From ResultSet");
        assertTrue("start", rs.last());
        value1 = rs.getObject("i");
        rs.updateObject("c", value, Types.VARCHAR );
        assertEquals("getObject", value, rs.getObject("c"));
        assertEquals("getObject", value1, rs.getObject("i"));
        assertTrue("first", rs.first());
        assertNotSame("getObject", value, rs.getObject("c"));
        assertTrue("start", rs.first());
        rs.updateObject("c", value, Types.VARCHAR );
        assertEquals("getObject", value, rs.getObject("c"));
        assertTrue("next", rs.next());
        assertNotSame("getObject", value, rs.getObject("c"));
        assertTrue("start", rs.last());
        rs.updateObject("c", value );
        assertEquals("getObject", value, rs.getObject("c"));
        assertTrue("previous", rs.previous());
        assertNotSame("getObject", value, rs.getObject("c"));
        assertTrue("start", rs.first());
        rs.updateObject("c", value, Types.VARCHAR );
        assertEquals("getObject", value, rs.getObject("c"));
        assertTrue("last", rs.last());
        assertNotSame("getObject", value, rs.getObject("c"));
        assertTrue("start", rs.first());
        rs.updateObject("c", value, Types.VARCHAR );
        assertEquals("getObject", value, rs.getObject("c"));
        rs.refreshRow();
        assertNotSame("getObject", value, rs.getObject("c"));
        assertTrue("start", rs.first());
        value1 = rs.getObject("i");
        value2 = rs.getObject("c");
        rs.updateObject("c", value);
        assertEquals("getObject", value, rs.getObject("c"));
        rs.moveToInsertRow();
        assertNull("new row", rs.getObject("i"));
        assertNull("new row", rs.getObject("c"));
        rs.updateObject("c", value);
        assertEquals("getObject", value, rs.getObject("c"));
        rs.moveToCurrentRow();
        assertEquals("getObject", value1, rs.getObject("i"));
        assertEquals("getObject", value2, rs.getObject("c"));
    }
    public void testDelete() throws Exception{
        Connection con = AllTests.getConnection();
        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        ResultSet rs = st.executeQuery("Select * From ResultSet Where i>1");
        assertTrue("next", rs.next());
        assertFalse( rs.rowDeleted() );
        rs.deleteRow();
        assertTrue( rs.rowDeleted() );
    }
    public void testOther() throws Exception{
        Connection con = AllTests.getConnection();
        Statement st = con.createStatement();
        ResultSet rs = st.executeQuery("Select * From ResultSet");
        assertEquals(st, rs.getStatement());
        rs.clearWarnings();
        assertNull(rs.getWarnings());
        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
        assertEquals( rs.getFetchDirection(), ResultSet.FETCH_FORWARD);
        rs.setFetchDirection(ResultSet.FETCH_REVERSE);
        assertEquals( rs.getFetchDirection(), ResultSet.FETCH_REVERSE);
        rs.setFetchSize(123);
        assertEquals( rs.getFetchSize(), 123);
    }
}